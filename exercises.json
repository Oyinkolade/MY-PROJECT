{
    "HTML": {
      "Exercises": "HTML Exercises:\n\n1. Build a Multi-Page Website:\n   - Create a website with at least five pages: Home, About, Services, Portfolio, and Contact.\n   - Use semantic HTML tags such as <header>, <nav>, <section>, <article>, and <footer>.\n   - Ensure each page links correctly to the others.\n\n2. Develop a Custom Form:\n   - Create a user feedback form using various input types (text, email, radio buttons, checkboxes, and dropdowns).\n   - Use HTML5 validation attributes (required, pattern, etc.) to enforce input rules.\n   - Style the form with basic CSS and explain your choices.\n\n3. Embed Multimedia Content:\n   - Integrate images, audio, and video elements into your pages.\n   - Provide alternative text for images and captions for videos to enhance accessibility.\n\n4. Accessibility and SEO:\n   - Create a page demonstrating proper heading hierarchy (<h1> to <h6>) and meta tags for SEO.\n   - Validate your HTML using the W3C Validator, document any issues, and fix them.\n\n5. Reflective Analysis:\n   - Write a short report on the importance of semantic HTML, accessibility, and SEO in modern web design."
    },
    "CSS": {
      "Exercises": "CSS Exercises:\n\n1. Responsive Layout Design:\n   - Develop a fully responsive layout using CSS Flexbox and Grid.\n   - Ensure the layout adapts smoothly across mobile, tablet, and desktop views.\n\n2. Styling Challenge:\n   - Create a custom stylesheet to style a basic HTML page. Focus on typography, color schemes, and spacing.\n   - Implement transitions and animations for interactive elements such as buttons and links.\n\n3. Dark Mode Toggle:\n   - Implement a dark mode feature using CSS variables and transitions.\n   - Allow users to switch between light and dark themes without reloading the page.\n\n4. Advanced Selectors and Pseudo-classes:\n   - Use complex selectors (e.g., attribute selectors, pseudo-classes like :hover, :nth-child) to style specific elements dynamically.\n   - Document how specificity and inheritance affect your CSS.\n\n5. Design Documentation:\n   - Write a detailed explanation of your design choices, including naming conventions (e.g., using BEM) and how your CSS improves the user experience."
    },
    "JavaScript": {
      "Exercises": "JavaScript Exercises:\n\n1. Dynamic To-Do List Application:\n   - Build a to-do list that allows users to add, edit, and delete tasks.\n   - Use event listeners and DOM manipulation to update the list in real-time.\n\n2. Interactive Quiz Game:\n   - Develop a quiz game with multiple-choice questions and real-time scoring.\n   - Include feedback for correct and incorrect answers.\n\n3. API Data Fetching Simulation:\n   - Write a function to simulate fetching data from an API (you can use hardcoded JSON data) and display it on the page.\n   - Handle potential errors and display user-friendly messages.\n\n4. Form Validation:\n   - Create a script that validates form input in real-time, providing immediate feedback to the user.\n   - Use regular expressions and conditional logic to enforce input rules.\n\n5. Modular JavaScript Practice:\n   - Refactor a piece of your code into ES6 modules. Create at least two modules and import/export functions between them.\n   - Document how modularity improves code maintainability."
    },
    "Python": {
      "Exercises": "Python Exercises:\n\n1. Interactive Greeting Program:\n   - Write a Python script that asks for the user's name and prints a personalized greeting.\n   - Implement error handling to manage unexpected inputs.\n\n2. Fibonacci Sequence Generator:\n   - Develop a script that calculates and prints the first 20 numbers of the Fibonacci sequence.\n   - Analyze the performance of your solution and discuss any potential improvements.\n\n3. Command-Line Calculator:\n   - Create a simple calculator that supports addition, subtraction, multiplication, and division.\n   - Ensure your program gracefully handles invalid inputs and exceptions.\n\n4. Text-Based Game:\n   - Build a small text-based adventure or guessing game that utilizes loops, conditionals, and functions.\n   - Include a scoring system and options to restart or exit the game.\n\n5. Unit Testing:\n   - Write unit tests using Pythonâ€™s unittest framework for at least two of your functions.\n   - Provide detailed documentation on how to run the tests and interpret the results.\n\n6. Documentation:\n   - Prepare a README file that explains your project, the exercises included, and the learning objectives."
    },
    "PHP": {
      "Exercises": "PHP Exercises:\n\n1. Form Processing Application:\n   - Develop a PHP script that processes data submitted through an HTML form and displays a personalized message based on the input.\n   - Use both GET and POST methods and handle form validation.\n\n2. Simple Blog System:\n   - Create a basic blog system using PHP and MySQL, allowing users to create, edit, and delete posts.\n   - Implement a user authentication system for managing posts.\n\n3. Object-Oriented PHP:\n   - Write a PHP class that represents a product (with properties like name, price, and description) and methods for displaying product information.\n   - Instantiate multiple objects and demonstrate inheritance by extending the base class.\n\n4. Database CRUD Operations:\n   - Create a PHP script that connects to a MySQL database and performs Create, Read, Update, and Delete (CRUD) operations.\n   - Ensure your code uses prepared statements to prevent SQL injection.\n\n5. Code Documentation:\n   - Document your code with inline comments and a separate documentation file explaining the architecture, error handling, and security measures implemented."
    },
    "SQL": {
      "Exercises": "SQL Exercises:\n\n1. Database Schema Design:\n   - Design a database schema for an e-commerce application including tables for products, customers, orders, and order details.\n   - Define appropriate primary and foreign keys, and normalize your schema to minimize redundancy.\n\n2. CRUD Query Practice:\n   - Write a series of SQL queries to create tables, insert data, update records, and delete records in your schema.\n   - Use the SELECT statement with various clauses (WHERE, GROUP BY, HAVING, ORDER BY) to retrieve specific data.\n\n3. Complex Query Development:\n   - Write queries that join multiple tables, including inner joins, outer joins, and self-joins.\n   - Develop subqueries and use common table expressions (CTEs) to simplify complex operations.\n\n4. Performance Optimization:\n   - Experiment with indexing strategies to improve query performance and document your findings.\n   - Write a report on how different indexing techniques affect query execution time.\n\n5. Security and Best Practices:\n   - Write a set of SQL scripts that demonstrate the use of parameterized queries to prevent SQL injection.\n   - Include detailed comments explaining each part of your script and best practices for writing secure SQL code."
    },
    "C#": {
      "Exercises": "C# Exercises:\n\n1. Console Application Development:\n   - Create a simple console application that prompts the user for input, processes the input, and displays a customized output.\n   - Demonstrate the use of variables, control structures, and error handling with try-catch blocks.\n\n2. Object-Oriented Programming Practice:\n   - Develop a class library that includes several classes (e.g., Car, Truck, Motorcycle) demonstrating inheritance and polymorphism.\n   - Instantiate these classes in a console application and call their methods to show dynamic behavior.\n\n3. Windows Forms Application:\n   - Build a basic Windows Forms application that includes various controls (buttons, textboxes, labels) to perform a specific task (e.g., a calculator or a data entry form).\n   - Implement event handling to process user interactions and update the UI dynamically.\n\n4. Exception Handling and Logging:\n   - Write a C# application that deliberately causes exceptions (e.g., divide-by-zero) and properly handles them with try-catch blocks.\n   - Log exceptions to a file and display a user-friendly message to the user.\n\n5. Unit Testing:\n   - Create unit tests using MSTest or NUnit for key functionalities in your application.\n   - Include comprehensive comments and documentation on your testing approach and how to run the tests.\n\n6. Documentation and Code Review:\n   - Prepare detailed documentation for your project, including design decisions, code structure, and instructions for building and running the application.\n   - Write a brief report on the importance of following SOLID principles in C# development."
    }
  }
  